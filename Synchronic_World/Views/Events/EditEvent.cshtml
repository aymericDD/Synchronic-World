@model Synchronic_World.Models.Event

@{
    Synchronic_World.Models.User me = (Synchronic_World.Models.User)@Session["User"];
}

@{
    ViewBag.Title = "Edit";
}

<div class="row">
    <div class="col-md-6">
        <h2>Edit</h2>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Event</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.EventId)
                @Html.HiddenFor(model => model.StatusEvent)
                @Html.HiddenFor(model => model.OwnerId)

                <div class="form-group">
                    @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TypeEvent, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.TypeEvent, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TypeEvent, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <div class="row">
            <h2>Status</h2>
            @Model.StatusEvent
        </div>
        <div class="row">
            <h2>Invited Friend</h2>
            @if (@Model.Participants != null)
            {
                <table class="table">
                    <tr>
                        <th>
                            User role
                        </th>
                        <th>
                            User name
                        </th>
                        <th>
                            Uer email
                        </th>
                        <th></th>
                    </tr>
                    @foreach (var participant in Model.Participants)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => participant.RoleUserTable.Role)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => participant.UserName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => participant.UserEmail)
                            </td>
                        </tr>
                    }
                </table>
            }
        </div>
        <div class="row">
            <h2>Invite Friend</h2>
            @if (@Model.StatusEvent == Synchronic_World.Models.Type.StatusEvent.Open)
            {
                <table class="table">
                    <tr>
                        <th>
                            User role
                        </th>
                        <th>
                            User name
                        </th>
                        <th>
                            Uer email
                        </th>
                        <th></th>
                    </tr>
                    @foreach (var user in me.friends)
                    {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => user.RoleUserTable.Role)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => user.UserName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => user.UserEmail)
                        </td>
                        <td>
                            @Html.ActionLink("Invited", "AddUser", new { p_Event = Model.EventId, id = user.UserId })
                        </td>
                    </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "MyEvents")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>